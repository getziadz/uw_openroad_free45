export PREP_FLOW_DIR :=$(realpath $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST)))))

##==============================================================================
##  ___                ___ _              _____                  _      
## | _ \_ _ ___ _ __  | __| |_____ __ __ |_   _|_ _ _ _ __ _ ___| |_ ___
## |  _/ '_/ -_) '_ \ | _|| / _ \ V  V /   | |/ _` | '_/ _` / -_)  _(_-<
## |_| |_| \___| .__/ |_| |_\___/\_/\_/    |_|\__,_|_| \__, \___|\__/__/
##             |_|                                     |___/            
##==============================================================================

#=======================================
# MAIN TARGETS
#=======================================

prep: prep.tools prep.unpack_pdk prep.mod_pdk
	@## Runs all of the preparation steps.
	mkdir -p $(PREP_VPATH) && touch $(PREP_VPATH)/$@

prep.tools:
	@## Perform tool preparation. Download all of the tools and scripts that we
	@## are going to need for the flow. Build and install anything that requires
	@## it and issue any patches or hacks to get things working!
	mkdir -p $(TOOLS_DIR)
	# OpenROAD tools
	cd $(TOOLS_DIR) && \
		wget https://github.com/The-OpenROAD-Project/alpha-release/releases/download/v2019-09-05_20-10/OpenROAD-2019-09-05_20-10.tar.gz && \
		tar xvf OpenROAD-2019-09-05_20-10.tar.gz && \
		mkdir -p lib && ln -nsf /usr/lib64/libffi.so.6 lib/libffi.so.5 && ln -snf /usr/lib64/libtcl8.6.so lib/libtcl8.5.so
	# OpenROAD alpha-release flow
	cd $(TOOLS_DIR) && \
		git clone https://github.com/The-OpenROAD-Project/alpha-release.git && \
		cd alpha-release ; git checkout v2019-09-05_20-10
	# BSG Fakeram
	cd $(TOOLS_DIR) &&\
		git clone https://github.com/bespoke-silicon-group/bsg_fakeram && \
		cd bsg_fakeram && $(MAKE) tools
	# BSG SV2V
	cd $(TOOLS_DIR) && \
		git clone https://github.com/bespoke-silicon-group/bsg_sv2v && \
		cd bsg_sv2v && $(MAKE) tools
	# Python virtual environment
	cd $(TOOLS_DIR) && \
		virtualenv --python=python3 python_venv && \
		source python_venv/bin/activate && \
		pip install matplotlib
	# Done!
	mkdir -p $(PREP_VPATH) ; touch $(PREP_VPATH)/$@

prep.unpack_pdk: $(NANGATE_PDK_TAR) $(FREE45_PDK_TAR)
	@## Unpack the pdk tar files into the pdk root dir.
	mkdir -p $(PDK_ROOT_DIR)
	cd $(PDK_ROOT_DIR) && tar xvf $(NANGATE_PDK_TAR)
	cd $(PDK_ROOT_DIR) && tar xvf $(FREE45_PDK_TAR)
	mkdir -p $(PREP_VPATH) ; touch $(PREP_VPATH)/$@

prep.mod_pdk: prep.unpack_pdk fakeram
	@## Perform pdk modifications for better compatibility and QoR with the EDA
	@## tools in the chip building flow.
	mkdir -p $(PREP_DIR)/{lib,lef,gds}
	$(PREP_FLOW_DIR)/scripts/mergeLib.pl free45_merged $(PDK_LIB_FILE) $(shell find $(FAKERAM_RUN_DIR) -name *.lib) > $(LIB_FILE)
	cat $(PDK_LEF_FILE) | grep -v "END LIBRARY" > $(PREP_DIR)/lef/merged.lef
	find $(FAKERAM_RUN_DIR) -name *.lef | xargs -I {} awk '/MACRO free45*/, /END free45*/' {} >> $(PREP_DIR)/lef/merged.lef
	echo -e "\nEND LIBRARY" >> $(PREP_DIR)/lef/merged.lef
	$(OPENROAD_FLOW)/scripts/padLefMacro.py -p 1.0 -i $(PREP_DIR)/lef/merged.lef -o $(PREP_DIR)/lef/padded.lef
	$(OPENROAD_FLOW)/scripts/modifyLefSpacing.py -i $(PREP_DIR)/lef/padded.lef -o $(LEF_FILE)
	klayout -zz -rd in=$(PDK_GDS_FILE) -rd out=$(GDS_FILE) -r $(PREP_FLOW_DIR)/scripts/convert_gds_dbu.rb
	mkdir -p $(PREP_VPATH) && touch $(PREP_VPATH)/$@

#=======================================
# CLEAN
#=======================================

clean.prep: are_you_sure clean.prep.tools clean.prep.unpack_pdk clean.prep.mod_pdk clean.fakeram
	@## Cleanup all of the preparation steps.
	rm -f $(PREP_VPATH)/$(subst clean.,,$@)

clean.prep.tools: are_you_sure
	@## Cleanup tool preparation.
	rm -rf $(TOOLS_DIR)
	rm -f $(PREP_VPATH)/$(subst clean.,,$@)

clean.prep.unpack_pdk: are_you_sure
	@## Cleanup unpack pdk preparation.
	rm -rf $(PDK_ROOT_DIR)
	rm -f $(PREP_VPATH)/$(subst clean.,,$@)

clean.prep.mod_pdk: are_you_sure
	@## Cleanup mod pdk preparation.
	rm -rf $(PREP_DIR)/{lib,lef,gds}
	rm -f $(PREP_VPATH)/$(subst clean.,,$@)

